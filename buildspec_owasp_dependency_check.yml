version: 0.2
phases:
  install:
    commands:
      - echo "install phase....."
  pre_build:
    commands:
      - composer install
      - wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.1/dependency-check-9.0.1-release.zip
      # owasp-dependency-check v9.0.1
      - unzip dependency-check-9.0.1-release.zip
      - rm dependency-check-9.0.1-release.zip
      - chmod -R 775 $CODEBUILD_SRC_DIR/dependency-check/bin/dependency-check.sh
      - echo "stage pre_build completed"
  build:
    commands: 
      - cd dependency-check/bin
      - $CODEBUILD_SRC_DIR/dependency-check/bin/dependency-check.sh --project "open-source-server" --format JSON --prettyPrint --enableExperimental --scan $CODEBUILD_SRC_DIR --exclude '$CODEBUILD_SRC_DIR/depedency-check/'
      # --project "open-source-server"는 검사할 프로젝트의 이름 
      - echo "OWASP dependency check analysis status is completed..."; 
      - high_risk_dependency=$( cat dependency-check-report.json | grep -c "HIGHEST" )
  post_build:
    commands:
      - | 
        jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"OWASP-Dependency-Check\", \
        \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
        \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
        \"build_id\": env.CODEBUILD_BUILD_ID, \
        \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
        \"report\": . }" dependency-check-report.json > payload.json
      - |
        if [ $high_risk_dependency -gt 0 ]; then
          echo "there are high or medium alerts.. failing the build"
          exit 1; 
        fi
artifacts:
  type: zip
  files: '**/*'

  # aws lambda invoke --function-name ImportVulToSecurityHub --payload file://payload.json dependency-check-report.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";
  # 위 코드는 lamda 함수 구현 시 exit 1; 위에 추가할 것 